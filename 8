##8
#1
import itertools

def tsp_dp(dist):
    n = len(dist)
    dp = [[float('inf')] * n for _ in range(1 << n)]
    dp[1][0] = 0
    for mask in range(1, 1 << n):
        for u in range(n):
            if (mask >> u) & 1:
                for v in range(n):
                    if u != v and (mask >> v) & 1:
                        dp[mask][u] = min(dp[mask][u], dp[mask ^ (1 << u)][v] + dist[v][u])
    return min(dp[(1 << n) - 1][i] + dist[i][0] for i in range(1, n))

# Example Input (distance matrix)
dist = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]
print("Optimal TSP Solution (DP):", tsp_dp(dist))

#2
def tsp_bruteforce(dist):
    n = len(dist)
    min_path = float('inf')
    for perm in itertools.permutations(range(1, n)):
        cost = dist[0][perm[0]] + sum(dist[perm[i]][perm[i+1]] for i in range(len(perm)-1)) + dist[perm[-1]][0]
        min_path = min(min_path, cost)
    return min_path

print("Optimal TSP Solution (Brute Force):", tsp_bruteforce(dist))

