##merge and quick
import random
import time

# Merge Sort Implementation
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]

        merge_sort(left)
        merge_sort(right)

        i = j = k = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1

# Quick Sort Implementation
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

# Measure execution time for both algorithms
def measure_time(sort_func, arr):
    start = time.time()
    sorted_arr = sort_func(arr.copy()) if sort_func == quick_sort else sort_func(arr.copy())
    end = time.time()
    return end - start

# Test for different input sizes
sizes = [1000, 5000, 10000, 20000]
for size in sizes:
    test_data = [random.randint(1, 100000) for _ in range(size)]
    print(f"\nArray Size: {size}")
    
    merge_time = measure_time(merge_sort, test_data)
    print(f"Merge Sort Time: {merge_time:.6f} seconds")
    
    quick_time = measure_time(quick_sort, test_data)
    print(f"Quick Sort Time: {quick_time:.6f} seconds")
    