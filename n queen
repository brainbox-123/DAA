##n queen
def print_solution(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col, n):
    # Check column and diagonals
    for i in range(row):
        if board[i][col] or (col - row + i >= 0 and board[i][col - row + i]) or (col + row - i < n and board[i][col + row - i]):
            return False
    return True

def solve_n_queens(board, row, n):
    if row == n:
        print_solution(board)
        return True  # Found at least one solution

    res = False
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            res = solve_n_queens(board, row + 1, n) or res
            board[row][col] = 0  # Backtrack
    return res

def n_queens(n):
    board = [[0] * n for _ in range(n)]
    if not solve_n_queens(board, 0, n):
        print("No solution exists.")

# Example Input
n = int(input("Enter the value of N: "))
n_queens(n)
